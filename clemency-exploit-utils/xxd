#!/usr/bin/env python

import sys
import string
import clemency.struct as struct

COLS = 9

NO_RAW = False
if '--noraw' in sys.argv:
  NO_RAW = True
  idx = sys.argv.index('--noraw')
  del sys.argv[idx]

OCTAL = False
if '--oc' in sys.argv:
  OCTAL = True
  idx = sys.argv.index('--oc')
  del sys.argv[idx]

DUMP_BUFFER = False
if '--dumpbuffer' in sys.argv:
  DUMP_BUFFER = True
  idx = sys.argv.index('--dumpbuffer')
  del sys.argv[idx]

if '--wide' in sys.argv:
  COLS = 18
  idx = sys.argv.index('--wide')
  del sys.argv[idx]
if '--ultrawide' in sys.argv:
  COLS = 27
  idx = sys.argv.index('--ultrawide')
  del sys.argv[idx]

TRIPLES = False
if '--triples' in sys.argv:
  TRIPLES = True
  idx = sys.argv.index('--triples')
  del sys.argv[idx]

if len(sys.argv) > 1:
  f = struct.ClemencyFile(open(sys.argv[1], 'r'))
else:
  f = struct.ClemencyFile(sys.stdin)

data = f.read_all()
f.close()

if DUMP_BUFFER:
  print `data`
  exit(0)

last_len = 0
lines = [data[i:i+COLS] for i in xrange(0, len(data), COLS)]
pos = 0
fmt_triple = "%09o" if OCTAL else "%07x"
fmt_single = "%03o" if OCTAL else "%03x"
for line in lines:
  output = "%07x: " % pos
  pos += len(line)
  real_data = None
  if TRIPLES:
    real_data = struct.unpack('T' * (len(line) / 3) + 'S' * (len(line) % 3), line)
    for triple in real_data[:len(line) / 3]:
      output += (fmt_triple % triple) + ' '
    accum = 0
    for single in real_data[len(line)/3:]:
      accum <<= 9
      accum |= single
    output += (fmt_triple % accum)
  else:
    real_data = struct.unpack('S' * (len(line)), line)
    for single in real_data:
      output += (fmt_single % single) + ' '
  len_so_far = len(output)
  if last_len != 0 and len_so_far < last_len:
    output += ' ' * (last_len - len_so_far)
  last_len = len_so_far
  output += ' '
  if not NO_RAW:
    for c in line:
      cb = struct.CB([c])
      if cb.is_printable() and (chr(c) in (string.ascii_letters + string.digits)):
        output += cb.to_printable_string()
      else:
        output += '.'
  print output
